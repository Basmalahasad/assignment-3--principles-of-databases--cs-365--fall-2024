<?php

function search($attribute, $search) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );

        $valid_columns = [
            'user_id', 'first_name', 'last_name', 'email',
            'website_id', 'website_name', 'url',
            'username', 'passphrase', 'created_at', 'comments'
        ];

        $db->exec("SET block_encryption_mode = '". BLOCK_ENCRYPTION_MODE ."'");
        $db->exec("SET @key_str = '". KEY_STR ."'");
        $db->exec("SET @init_vector = '". INIT_VECTOR ."'");

        $search_table =
            "CREATE TEMPORARY TABLE temporary_table AS
            SELECT
                user.user_id,
                user.first_name,
                user.last_name,
                user.email,
                website.website_id,
                website.website_name,
                website.url,
                registers_for.username,
                CAST(AES_DECRYPT(registers_for.passphrase, '". KEY_STR ."', '". INIT_VECTOR ."') AS CHAR) AS passphrase,
                registers_for.created_at,
                registers_for.comments
            FROM registers_for
            INNER JOIN user ON registers_for.user_id = user.user_id
            INNER JOIN website ON registers_for.website_id = website.website_id";
        $db->exec($search_table);

        if ($attribute === 'all') {
            $conditions = [];
            foreach ($valid_columns as $column) {
                $conditions[] = "$column LIKE \"%{$search}%\"";
            }
            $where_clause = implode(' OR ', $conditions);
            $select_query = "SELECT * FROM temporary_table WHERE $where_clause";
        } else {
            $select_query = "SELECT * FROM temporary_table WHERE $attribute LIKE \"%{$search}%\"";
        }

        $statement = $db -> prepare($select_query);
        $statement -> execute();

        $results = $statement->fetchAll(PDO::FETCH_ASSOC);

        if (empty($results)) {
            echo "<div class='message error'><p>No results found for '$search' in '$attribute'.</p></div>";
        } else {
            echo "<table border='1'>";
            echo "<thead><tr>";
            foreach (array_keys($results[0]) as $col) {
                echo "<th>" . htmlspecialchars($col) . "</th>";
            }
            echo "</tr></thead><tbody>";
            foreach ($results as $row) {
                echo "<tr>";
                foreach ($row as $cell) {
                    echo "<td>" . htmlspecialchars($cell ?? '') . "</td>";
                }
                echo "</tr>";
            }
            echo "</tbody></table>";

            $row_count = count($results);
            echo "<div class='message info'><p>Number of entries found: $row_count</p></div>";
        }

    } catch( PDOException $e ) {
        echo '<p>The following message was generated by function <code>search</code>:</p>' . "\n";
        echo '<p>' . $e -> getMessage() . '</p>' . "\n";
        echo "<p>There are a few reasons for this. Perhaps the database doesn’t exist or wasn’t mounted. Does the volume/drive containing the database have read and write permissions?</p>\n";
        echo '<p>Click <a href="./">here</a> to go back.</p>';

        exit;
    }
}

function update($current_attribute, $new_attribute, $query_attribute, $pattern) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );

        $search_table=
            "UPDATE registers_for
            JOIN user USING (user_id)
            JOIN website USING (website_id)
            SET {$current_attribute}=\"{$new_attribute}\"
            WHERE {$query_attribute}=\"{$pattern}\"";

        $statement = $db -> prepare($search_table);
        $statement -> execute();

        if ($statement->rowCount() > 0) {
            echo '<div class="message success"><p>Attribute updated successfully.</p></div>';
        } else {
            echo '<div class="message error"><p>No records matched the specified pattern. No update was made.</p></div>';
        }

    } catch( PDOException $e ) {
        echo '<div class="message error"><p>The following message was generated by function <code>update</code>:</p></div>' . "\n";
        echo '<p>' . $e -> getMessage() . '</p>' . "\n";

        exit;
    }
}

function insert($website_name, $website_url, $email, $username, $passphrase, $comment) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );

        $db->exec("SET block_encryption_mode = '". BLOCK_ENCRYPTION_MODE ."'");
        $db->exec("SET @key_str = '". KEY_STR ."'");
        $db->exec("SET @init_vector = '". INIT_VECTOR ."'");

        $user_query = "SELECT user_id, first_name, last_name FROM user WHERE email = :email";
        $user_statement = $db->prepare($user_query);
        $user_statement->execute(['email' => $email]);
        $user = $user_statement->fetch(PDO::FETCH_ASSOC);

        if (!$user) {
            echo '<div class="message error"><p>No users exist with this email!</p></div>';
            return;
        }

        $user_id = $user['user_id'];

        $website_query = "SELECT website_id FROM website WHERE url = :url";
        $website_statement = $db->prepare($website_query);
        $website_statement->execute(['url' => $website_url]);
        $website = $website_statement->fetch(PDO::FETCH_ASSOC);

        if (!$website) {
            $create_website = "INSERT INTO website (website_name, url) VALUES (:website_name, :url)";
            $entry_statement = $db->prepare($create_website);
            $entry_statement->execute(['website_name' => $website_name, 'url' => $website_url]);

            $new_website_query = "SELECT website_id FROM website WHERE url = :url";
            $new_website_statement = $db->prepare($new_website_query);
            $new_website_statement->execute(['url' => $website_url]);
            $website = $new_website_statement->fetch(PDO::FETCH_ASSOC);
        }

        $website_id = $website['website_id'];

        $check_query = "SELECT COUNT(*) FROM registers_for WHERE website_id = :website_id AND username = :username";
        $check_statement = $db->prepare($check_query);
        $check_statement->execute(['website_id' => $website_id, 'username' => $username]);
        $exists = $check_statement->fetchColumn();

        if ($exists > 0) {
            echo '<div class="message warning"><p>Careful! A user already exists with this username.</p></div>';
            return;
        }

        $encrypted_passphrase = $db->query("SELECT AES_ENCRYPT('$passphrase', '". KEY_STR ."', '". INIT_VECTOR ."')")->fetchColumn();

        $insert_query = "
            INSERT INTO registers_for (website_id, user_id, username, passphrase, created_at, comments)
            VALUES (:website_id, :user_id, :username, :passphrase, NOW(), :comments)";

        $statement = $db->prepare($insert_query);

        $statement->execute([
            'website_id' => $website_id,
            'user_id' => $user_id,
            'username' => $username,
            'passphrase' => $encrypted_passphrase,
            'comments' => $comment
        ]);

        if ($statement->rowCount() > 0) {
            echo '<div class="message success"><p>New entry added successfully!</p></div>';
        } else {
            echo '<div class="message error"><p>Failed to add new entry.</p></div>';
        }

    } catch(PDOException $e) {
        echo '<p>The following message was generated by function <code>insert</code>:</p>' . "\n";
        echo '<p>' . $e->getMessage() . '</p>' . "\n";
        exit;
    }
}

function delete($attribute, $pattern) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );

        $tableMap = [
            'user_id' => 'user',
            'first_name' => 'user',
            'last_name' => 'user',
            'email' => 'user',
            'website_id' => 'website',
            'website_name' => 'website',
            'url' => 'website',
            'username' => 'registers_for',
            'passphrase' => 'registers_for',
            'created_at' => 'created_at',
            'comments' => 'registers_for'
        ];

        $table = $tableMap[$attribute];

        $delete_query = "DELETE FROM $table WHERE {$attribute}=\"{$pattern}\"";
        $statement = $db->prepare($delete_query);
        $statement->execute();

        if ($statement->rowCount() > 0) {
            echo '<div class="message success"><p>Entry deleted successfully!</p></div>';
        } else {
            echo '<div class="message error"><p>No matching entry found to delete.</p></div>';
        }

    } catch(PDOException $e) {
        echo '<p>The following message was generated by function <code>delete</code>:</p>' . "\n";
        echo '<p>' . $e -> getMessage() . '</p>' . "\n";

        exit;
    }
}
